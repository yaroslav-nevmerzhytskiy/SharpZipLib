buildscript {
    repositories {
        maven {
            url 'https://artifactory.madness.games/artifactory/plugins-release'
            credentials {
                username = System.env.ARTIFACTORY_USER
                password = System.env.ARTIFACTORY_PASSWORD
            }
        }
        maven {
            url 'https://artifactory.madness.games/artifactory/plugins-snapshot'
            credentials {
                username = System.env.ARTIFACTORY_USER
                password = System.env.ARTIFACTORY_PASSWORD
            }
        }
    }
    dependencies {
        classpath 'com.madnessgames.ci.pipeline:ci-plugin-madness:0.2.0'
    }
}
apply plugin: com.madnessgames.ci.pipeline.madness.Plugin

import com.madnessgames.ci.pipeline.base.settings.SettingsParser
import com.madnessgames.ci.pipeline.madness.settings.VaultEnabledSettings

class BuildSettings extends VaultEnabledSettings
{
    BuildSettings(Project project)
    {
        super(project)
    }
}

def getVaultData(String key, String path) {
    def vault = new BuildSettings(this.project)
    try {
        return vault.getVaultData(key, path)
    } catch (e) {
        println "Error getting secret from Vault for key $key from path $path"
        println "$e"
    }
}

def getArtifactoryUser() {
    if(this.project.findProperty('isStrikeforceLibrary')) {
        return getVaultData('username', 'jenkins/jfrog/service-accounts/fst')
    }

    return getVaultData('username', 'jenkins/jfrog/service-accounts/coretech')
}

def getArtifactoryPassword() {
    if(this.project.findProperty('isStrikeforceLibrary')) {
        return getVaultData('password', 'jenkins/jfrog/service-accounts/fst')
    }

    return getVaultData('password', 'jenkins/jfrog/service-accounts/coretech')
}

ext.secrets = [
    appliveryToken: getVaultData('token', 'gameteams/coretech/applivery'),
    artifactoryUser: getArtifactoryUser(),
    artifactoryPassword: getArtifactoryPassword(),
    getValue: { key, path -> getVaultData(key, path) }
]